# coding: utf-8

"""
    COVID-19 Local API

    API to get local help information about COVID-19 (hotlines, websites, test sites, health departments)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TestSite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country_code': 'str',
        'lat': 'float',
        'lon': 'float',
        'name': 'str',
        'street': 'str',
        'zip_code': 'int',
        'city': 'str',
        'address_supplement': 'str',
        'phone': 'str',
        'website': 'str',
        'operating_hours': 'str',
        'appointment_required': 'bool',
        'description': 'str',
        'sources': 'str',
        'distance': 'float'
    }

    attribute_map = {
        'country_code': 'country_code',
        'lat': 'lat',
        'lon': 'lon',
        'name': 'name',
        'street': 'street',
        'zip_code': 'zip_code',
        'city': 'city',
        'address_supplement': 'address_supplement',
        'phone': 'phone',
        'website': 'website',
        'operating_hours': 'operating_hours',
        'appointment_required': 'appointment_required',
        'description': 'description',
        'sources': 'sources',
        'distance': 'distance'
    }

    def __init__(self, country_code=None, lat=None, lon=None, name=None, street=None, zip_code=None, city=None, address_supplement=None, phone=None, website=None, operating_hours=None, appointment_required=None, description=None, sources=None, distance=None, local_vars_configuration=None):  # noqa: E501
        """TestSite - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country_code = None
        self._lat = None
        self._lon = None
        self._name = None
        self._street = None
        self._zip_code = None
        self._city = None
        self._address_supplement = None
        self._phone = None
        self._website = None
        self._operating_hours = None
        self._appointment_required = None
        self._description = None
        self._sources = None
        self._distance = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if name is not None:
            self.name = name
        if street is not None:
            self.street = street
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if address_supplement is not None:
            self.address_supplement = address_supplement
        if phone is not None:
            self.phone = phone
        if website is not None:
            self.website = website
        if operating_hours is not None:
            self.operating_hours = operating_hours
        if appointment_required is not None:
            self.appointment_required = appointment_required
        if description is not None:
            self.description = description
        if sources is not None:
            self.sources = sources
        if distance is not None:
            self.distance = distance

    @property
    def country_code(self):
        """Gets the country_code of this TestSite.  # noqa: E501


        :return: The country_code of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this TestSite.


        :param country_code: The country_code of this TestSite.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def lat(self):
        """Gets the lat of this TestSite.  # noqa: E501


        :return: The lat of this TestSite.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this TestSite.


        :param lat: The lat of this TestSite.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this TestSite.  # noqa: E501


        :return: The lon of this TestSite.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this TestSite.


        :param lon: The lon of this TestSite.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this TestSite.  # noqa: E501


        :return: The name of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestSite.


        :param name: The name of this TestSite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def street(self):
        """Gets the street of this TestSite.  # noqa: E501


        :return: The street of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this TestSite.


        :param street: The street of this TestSite.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def zip_code(self):
        """Gets the zip_code of this TestSite.  # noqa: E501


        :return: The zip_code of this TestSite.  # noqa: E501
        :rtype: int
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this TestSite.


        :param zip_code: The zip_code of this TestSite.  # noqa: E501
        :type: int
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this TestSite.  # noqa: E501


        :return: The city of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TestSite.


        :param city: The city of this TestSite.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address_supplement(self):
        """Gets the address_supplement of this TestSite.  # noqa: E501


        :return: The address_supplement of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._address_supplement

    @address_supplement.setter
    def address_supplement(self, address_supplement):
        """Sets the address_supplement of this TestSite.


        :param address_supplement: The address_supplement of this TestSite.  # noqa: E501
        :type: str
        """

        self._address_supplement = address_supplement

    @property
    def phone(self):
        """Gets the phone of this TestSite.  # noqa: E501


        :return: The phone of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this TestSite.


        :param phone: The phone of this TestSite.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def website(self):
        """Gets the website of this TestSite.  # noqa: E501


        :return: The website of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this TestSite.


        :param website: The website of this TestSite.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def operating_hours(self):
        """Gets the operating_hours of this TestSite.  # noqa: E501


        :return: The operating_hours of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._operating_hours

    @operating_hours.setter
    def operating_hours(self, operating_hours):
        """Sets the operating_hours of this TestSite.


        :param operating_hours: The operating_hours of this TestSite.  # noqa: E501
        :type: str
        """

        self._operating_hours = operating_hours

    @property
    def appointment_required(self):
        """Gets the appointment_required of this TestSite.  # noqa: E501


        :return: The appointment_required of this TestSite.  # noqa: E501
        :rtype: bool
        """
        return self._appointment_required

    @appointment_required.setter
    def appointment_required(self, appointment_required):
        """Sets the appointment_required of this TestSite.


        :param appointment_required: The appointment_required of this TestSite.  # noqa: E501
        :type: bool
        """

        self._appointment_required = appointment_required

    @property
    def description(self):
        """Gets the description of this TestSite.  # noqa: E501


        :return: The description of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestSite.


        :param description: The description of this TestSite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sources(self):
        """Gets the sources of this TestSite.  # noqa: E501


        :return: The sources of this TestSite.  # noqa: E501
        :rtype: str
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this TestSite.


        :param sources: The sources of this TestSite.  # noqa: E501
        :type: str
        """

        self._sources = sources

    @property
    def distance(self):
        """Gets the distance of this TestSite.  # noqa: E501


        :return: The distance of this TestSite.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this TestSite.


        :param distance: The distance of this TestSite.  # noqa: E501
        :type: float
        """

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestSite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestSite):
            return True

        return self.to_dict() != other.to_dict()
