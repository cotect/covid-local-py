# coding: utf-8

"""
    COVID-19 Local API

    API to get local help information about COVID-19 (hotlines, websites, test sites, health departments)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Website(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country_code': 'str',
        'place': 'str',
        'geonames_id': 'int',
        'name': 'str',
        'operator': 'str',
        'website': 'str',
        'category': 'str',
        'description': 'str',
        'sources': 'str'
    }

    attribute_map = {
        'country_code': 'country_code',
        'place': 'place',
        'geonames_id': 'geonames_id',
        'name': 'name',
        'operator': 'operator',
        'website': 'website',
        'category': 'category',
        'description': 'description',
        'sources': 'sources'
    }

    def __init__(self, country_code=None, place=None, geonames_id=None, name=None, operator=None, website=None, category=None, description=None, sources=None, local_vars_configuration=None):  # noqa: E501
        """Website - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country_code = None
        self._place = None
        self._geonames_id = None
        self._name = None
        self._operator = None
        self._website = None
        self._category = None
        self._description = None
        self._sources = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if place is not None:
            self.place = place
        if geonames_id is not None:
            self.geonames_id = geonames_id
        if name is not None:
            self.name = name
        if operator is not None:
            self.operator = operator
        if website is not None:
            self.website = website
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if sources is not None:
            self.sources = sources

    @property
    def country_code(self):
        """Gets the country_code of this Website.  # noqa: E501


        :return: The country_code of this Website.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Website.


        :param country_code: The country_code of this Website.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def place(self):
        """Gets the place of this Website.  # noqa: E501


        :return: The place of this Website.  # noqa: E501
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this Website.


        :param place: The place of this Website.  # noqa: E501
        :type: str
        """

        self._place = place

    @property
    def geonames_id(self):
        """Gets the geonames_id of this Website.  # noqa: E501


        :return: The geonames_id of this Website.  # noqa: E501
        :rtype: int
        """
        return self._geonames_id

    @geonames_id.setter
    def geonames_id(self, geonames_id):
        """Sets the geonames_id of this Website.


        :param geonames_id: The geonames_id of this Website.  # noqa: E501
        :type: int
        """

        self._geonames_id = geonames_id

    @property
    def name(self):
        """Gets the name of this Website.  # noqa: E501


        :return: The name of this Website.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Website.


        :param name: The name of this Website.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operator(self):
        """Gets the operator of this Website.  # noqa: E501


        :return: The operator of this Website.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Website.


        :param operator: The operator of this Website.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def website(self):
        """Gets the website of this Website.  # noqa: E501


        :return: The website of this Website.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Website.


        :param website: The website of this Website.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def category(self):
        """Gets the category of this Website.  # noqa: E501


        :return: The category of this Website.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Website.


        :param category: The category of this Website.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Website.  # noqa: E501


        :return: The description of this Website.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Website.


        :param description: The description of this Website.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sources(self):
        """Gets the sources of this Website.  # noqa: E501


        :return: The sources of this Website.  # noqa: E501
        :rtype: str
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Website.


        :param sources: The sources of this Website.  # noqa: E501
        :type: str
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Website):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Website):
            return True

        return self.to_dict() != other.to_dict()
