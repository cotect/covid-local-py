# coding: utf-8

"""
    COVID-19 Local API

    API to get local help information about COVID-19 (hotlines, websites, test sites, health departments)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from covid_local.configuration import Configuration


class ResultsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'place': 'Place',
        'hotlines': 'list[Hotline]',
        'websites': 'list[Website]',
        'test_sites': 'list[TestSite]',
        'health_departments': 'list[HealthDepartment]'
    }

    attribute_map = {
        'place': 'place',
        'hotlines': 'hotlines',
        'websites': 'websites',
        'test_sites': 'test_sites',
        'health_departments': 'health_departments'
    }

    def __init__(self, place=None, hotlines=[], websites=[], test_sites=[], health_departments=[], local_vars_configuration=None):  # noqa: E501
        """ResultsList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._place = None
        self._hotlines = None
        self._websites = None
        self._test_sites = None
        self._health_departments = None
        self.discriminator = None

        self.place = place
        if hotlines is not None:
            self.hotlines = hotlines
        if websites is not None:
            self.websites = websites
        if test_sites is not None:
            self.test_sites = test_sites
        if health_departments is not None:
            self.health_departments = health_departments

    @property
    def place(self):
        """Gets the place of this ResultsList.  # noqa: E501


        :return: The place of this ResultsList.  # noqa: E501
        :rtype: Place
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this ResultsList.


        :param place: The place of this ResultsList.  # noqa: E501
        :type: Place
        """
        if self.local_vars_configuration.client_side_validation and place is None:  # noqa: E501
            raise ValueError("Invalid value for `place`, must not be `None`")  # noqa: E501

        self._place = place

    @property
    def hotlines(self):
        """Gets the hotlines of this ResultsList.  # noqa: E501


        :return: The hotlines of this ResultsList.  # noqa: E501
        :rtype: list[Hotline]
        """
        return self._hotlines

    @hotlines.setter
    def hotlines(self, hotlines):
        """Sets the hotlines of this ResultsList.


        :param hotlines: The hotlines of this ResultsList.  # noqa: E501
        :type: list[Hotline]
        """

        self._hotlines = hotlines

    @property
    def websites(self):
        """Gets the websites of this ResultsList.  # noqa: E501


        :return: The websites of this ResultsList.  # noqa: E501
        :rtype: list[Website]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this ResultsList.


        :param websites: The websites of this ResultsList.  # noqa: E501
        :type: list[Website]
        """

        self._websites = websites

    @property
    def test_sites(self):
        """Gets the test_sites of this ResultsList.  # noqa: E501


        :return: The test_sites of this ResultsList.  # noqa: E501
        :rtype: list[TestSite]
        """
        return self._test_sites

    @test_sites.setter
    def test_sites(self, test_sites):
        """Sets the test_sites of this ResultsList.


        :param test_sites: The test_sites of this ResultsList.  # noqa: E501
        :type: list[TestSite]
        """

        self._test_sites = test_sites

    @property
    def health_departments(self):
        """Gets the health_departments of this ResultsList.  # noqa: E501


        :return: The health_departments of this ResultsList.  # noqa: E501
        :rtype: list[HealthDepartment]
        """
        return self._health_departments

    @health_departments.setter
    def health_departments(self, health_departments):
        """Sets the health_departments of this ResultsList.


        :param health_departments: The health_departments of this ResultsList.  # noqa: E501
        :type: list[HealthDepartment]
        """

        self._health_departments = health_departments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsList):
            return True

        return self.to_dict() != other.to_dict()
